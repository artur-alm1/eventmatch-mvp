generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PRODUTOR
  PRESTADOR
}

enum ProtocolStatus {
  PENDENTE
  ACEITO
  RECUSADO
  FINALIZADO
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(PRESTADOR)
  avatarUrl String?
  resumeUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  events       Event[]       @relation("ProducerEvents") // produtor -> eventos
  candidatures Protocol[]
  portfolio    Portfolio?
  resumes      ResumeFile[]
  ChatMessage  ChatMessage[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  date        DateTime
  createdAt   DateTime @default(now())

  // Dono do evento (produtor)
  producerId String
  producer   User   @relation("ProducerEvents", fields: [producerId], references: [id])

  protocols Protocol[]
}

model Protocol {
  id        String         @id @default(uuid())
  status    ProtocolStatus @default(PENDENTE)
  createdAt DateTime       @default(now())

  // Relações
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  userId String // prestador (obrigatório)
  user   User   @relation(fields: [userId], references: [id])

  chatMessages ChatMessage[]
}

model ResumeFile {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  filename       String
  mimeType       String
  size           Int
  data           Bytes
  textExtraction String?
  createdAt      DateTime @default(now())

  @@index([userId, createdAt])
}

model Portfolio {
  id          String   @id @default(uuid())
  bio         String
  specialties String[]
  photos      String[]
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id String @id @default(cuid())

  protocolId String
  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  body      String
  createdAt DateTime  @default(now())
  readAt    DateTime?

  @@index([protocolId, createdAt], name: "chat_protocol_created_idx")
  @@index([senderId, createdAt], name: "chat_sender_created_idx")
}
